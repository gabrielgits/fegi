// Mocks generated by Mockito 5.4.2 from annotations
// in fegi/test/features/home/domain/usecases/usecase_download_all_releases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:fegi/core/exceptions/expt_data.dart' as _i2;
import 'package:fegi/core/exceptions/expt_service.dart' as _i5;
import 'package:fegi/core/exceptions/expt_web.dart' as _i4;
import 'package:fegi/core/feature/domain/entities/sdk_release.dart' as _i3;
import 'package:fegi/core/feature/infra/services/service_file.dart' as _i9;
import 'package:fegi/features/home/domain/repositories/repository_local_release.dart'
    as _i6;
import 'package:fegi/features/home/domain/repositories/repository_remote_release.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExptData_0 extends _i1.SmartFake implements _i2.ExptData {
  _FakeExptData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSdkRelease_1 extends _i1.SmartFake implements _i3.SdkRelease {
  _FakeSdkRelease_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExptWeb_2 extends _i1.SmartFake implements _i4.ExptWeb {
  _FakeExptWeb_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExptService_3 extends _i1.SmartFake implements _i5.ExptService {
  _FakeExptService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryLocalRelease].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryLocalRelease extends _i1.Mock
    implements _i6.RepositoryLocalRelease {
  @override
  _i7.Future<({_i2.ExptData exception, int id})> addRelease(
          _i3.SdkRelease? release) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRelease,
          [release],
        ),
        returnValue: _i7.Future<({_i2.ExptData exception, int id})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #addRelease,
              [release],
            ),
          ),
          id: 0
        )),
        returnValueForMissingStub:
            _i7.Future<({_i2.ExptData exception, int id})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #addRelease,
              [release],
            ),
          ),
          id: 0
        )),
      ) as _i7.Future<({_i2.ExptData exception, int id})>);
  @override
  _i7.Future<({int count, _i2.ExptData exception})> addListReleases(
          List<_i3.SdkRelease>? releases) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListReleases,
          [releases],
        ),
        returnValue: _i7.Future<({int count, _i2.ExptData exception})>.value((
          count: 0,
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #addListReleases,
              [releases],
            ),
          )
        )),
        returnValueForMissingStub:
            _i7.Future<({int count, _i2.ExptData exception})>.value((
          count: 0,
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #addListReleases,
              [releases],
            ),
          )
        )),
      ) as _i7.Future<({int count, _i2.ExptData exception})>);
  @override
  _i7.Future<
      ({_i2.ExptData exception, _i3.SdkRelease release})> updateReleaseState({
    required int? id,
    required int? state,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateReleaseState,
          [],
          {
            #id: id,
            #state: state,
          },
        ),
        returnValue: _i7
            .Future<({_i2.ExptData exception, _i3.SdkRelease release})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #updateReleaseState,
              [],
              {
                #id: id,
                #state: state,
              },
            ),
          ),
          release: _FakeSdkRelease_1(
            this,
            Invocation.method(
              #updateReleaseState,
              [],
              {
                #id: id,
                #state: state,
              },
            ),
          )
        )),
        returnValueForMissingStub: _i7
            .Future<({_i2.ExptData exception, _i3.SdkRelease release})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #updateReleaseState,
              [],
              {
                #id: id,
                #state: state,
              },
            ),
          ),
          release: _FakeSdkRelease_1(
            this,
            Invocation.method(
              #updateReleaseState,
              [],
              {
                #id: id,
                #state: state,
              },
            ),
          )
        )),
      ) as _i7.Future<({_i2.ExptData exception, _i3.SdkRelease release})>);
  @override
  _i7.Future<({_i2.ExptData exception, List<_i3.SdkRelease> releases})>
      updateListReleaseState({
    required int? fromState,
    required int? toState,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #updateListReleaseState,
              [],
              {
                #fromState: fromState,
                #toState: toState,
              },
            ),
            returnValue: _i7.Future<
                ({
                  _i2.ExptData exception,
                  List<_i3.SdkRelease> releases
                })>.value((
              exception: _FakeExptData_0(
                this,
                Invocation.method(
                  #updateListReleaseState,
                  [],
                  {
                    #fromState: fromState,
                    #toState: toState,
                  },
                ),
              ),
              releases: <_i3.SdkRelease>[]
            )),
            returnValueForMissingStub: _i7.Future<
                ({
                  _i2.ExptData exception,
                  List<_i3.SdkRelease> releases
                })>.value((
              exception: _FakeExptData_0(
                this,
                Invocation.method(
                  #updateListReleaseState,
                  [],
                  {
                    #fromState: fromState,
                    #toState: toState,
                  },
                ),
              ),
              releases: <_i3.SdkRelease>[]
            )),
          ) as _i7.Future<
              ({_i2.ExptData exception, List<_i3.SdkRelease> releases})>);
  @override
  _i7.Future<({_i2.ExptData exception, int id})> deleteRelease(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRelease,
          [id],
        ),
        returnValue: _i7.Future<({_i2.ExptData exception, int id})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #deleteRelease,
              [id],
            ),
          ),
          id: 0
        )),
        returnValueForMissingStub:
            _i7.Future<({_i2.ExptData exception, int id})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #deleteRelease,
              [id],
            ),
          ),
          id: 0
        )),
      ) as _i7.Future<({_i2.ExptData exception, int id})>);
  @override
  _i7.Future<({int count, _i2.ExptData exception})> deleteAllRelease() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllRelease,
          [],
        ),
        returnValue: _i7.Future<({int count, _i2.ExptData exception})>.value((
          count: 0,
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #deleteAllRelease,
              [],
            ),
          )
        )),
        returnValueForMissingStub:
            _i7.Future<({int count, _i2.ExptData exception})>.value((
          count: 0,
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #deleteAllRelease,
              [],
            ),
          )
        )),
      ) as _i7.Future<({int count, _i2.ExptData exception})>);
  @override
  _i7.Future<({_i2.ExptData exception, List<_i3.SdkRelease> releases})>
      loadListRelease() => (super.noSuchMethod(
            Invocation.method(
              #loadListRelease,
              [],
            ),
            returnValue: _i7.Future<
                ({
                  _i2.ExptData exception,
                  List<_i3.SdkRelease> releases
                })>.value((
              exception: _FakeExptData_0(
                this,
                Invocation.method(
                  #loadListRelease,
                  [],
                ),
              ),
              releases: <_i3.SdkRelease>[]
            )),
            returnValueForMissingStub: _i7.Future<
                ({
                  _i2.ExptData exception,
                  List<_i3.SdkRelease> releases
                })>.value((
              exception: _FakeExptData_0(
                this,
                Invocation.method(
                  #loadListRelease,
                  [],
                ),
              ),
              releases: <_i3.SdkRelease>[]
            )),
          ) as _i7.Future<
              ({_i2.ExptData exception, List<_i3.SdkRelease> releases})>);
  @override
  _i7.Future<({_i2.ExptData exception, _i3.SdkRelease release})>
      loadGlobalRelease() => (super.noSuchMethod(
            Invocation.method(
              #loadGlobalRelease,
              [],
            ),
            returnValue: _i7.Future<
                ({_i2.ExptData exception, _i3.SdkRelease release})>.value((
              exception: _FakeExptData_0(
                this,
                Invocation.method(
                  #loadGlobalRelease,
                  [],
                ),
              ),
              release: _FakeSdkRelease_1(
                this,
                Invocation.method(
                  #loadGlobalRelease,
                  [],
                ),
              )
            )),
            returnValueForMissingStub: _i7.Future<
                ({_i2.ExptData exception, _i3.SdkRelease release})>.value((
              exception: _FakeExptData_0(
                this,
                Invocation.method(
                  #loadGlobalRelease,
                  [],
                ),
              ),
              release: _FakeSdkRelease_1(
                this,
                Invocation.method(
                  #loadGlobalRelease,
                  [],
                ),
              )
            )),
          ) as _i7.Future<({_i2.ExptData exception, _i3.SdkRelease release})>);
  @override
  _i7.Future<
      ({_i2.ExptData exception, _i3.SdkRelease release})> updateGlobalRelease(
          _i3.SdkRelease? sdkVersion) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGlobalRelease,
          [sdkVersion],
        ),
        returnValue: _i7
            .Future<({_i2.ExptData exception, _i3.SdkRelease release})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #updateGlobalRelease,
              [sdkVersion],
            ),
          ),
          release: _FakeSdkRelease_1(
            this,
            Invocation.method(
              #updateGlobalRelease,
              [sdkVersion],
            ),
          )
        )),
        returnValueForMissingStub: _i7
            .Future<({_i2.ExptData exception, _i3.SdkRelease release})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #updateGlobalRelease,
              [sdkVersion],
            ),
          ),
          release: _FakeSdkRelease_1(
            this,
            Invocation.method(
              #updateGlobalRelease,
              [sdkVersion],
            ),
          )
        )),
      ) as _i7.Future<({_i2.ExptData exception, _i3.SdkRelease release})>);
}

/// A class which mocks [RepositoryRemoteRelease].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryRemoteRelease extends _i1.Mock
    implements _i8.RepositoryRemoteRelease {
  @override
  _i7.Future<({_i4.ExptWeb exception, List<_i3.SdkRelease> releases})>
      getListReleases(String? url) => (super.noSuchMethod(
            Invocation.method(
              #getListReleases,
              [url],
            ),
            returnValue: _i7.Future<
                ({
                  _i4.ExptWeb exception,
                  List<_i3.SdkRelease> releases
                })>.value((
              exception: _FakeExptWeb_2(
                this,
                Invocation.method(
                  #getListReleases,
                  [url],
                ),
              ),
              releases: <_i3.SdkRelease>[]
            )),
            returnValueForMissingStub: _i7.Future<
                ({
                  _i4.ExptWeb exception,
                  List<_i3.SdkRelease> releases
                })>.value((
              exception: _FakeExptWeb_2(
                this,
                Invocation.method(
                  #getListReleases,
                  [url],
                ),
              ),
              releases: <_i3.SdkRelease>[]
            )),
          ) as _i7.Future<
              ({_i4.ExptWeb exception, List<_i3.SdkRelease> releases})>);
  @override
  _i7.Future<({List<int> data, _i4.ExptWeb exception})> downloadFile(
          String? link) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [link],
        ),
        returnValue:
            _i7.Future<({List<int> data, _i4.ExptWeb exception})>.value((
          data: <int>[],
          exception: _FakeExptWeb_2(
            this,
            Invocation.method(
              #downloadFile,
              [link],
            ),
          )
        )),
        returnValueForMissingStub:
            _i7.Future<({List<int> data, _i4.ExptWeb exception})>.value((
          data: <int>[],
          exception: _FakeExptWeb_2(
            this,
            Invocation.method(
              #downloadFile,
              [link],
            ),
          )
        )),
      ) as _i7.Future<({List<int> data, _i4.ExptWeb exception})>);
}

/// A class which mocks [ServiceFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceFile extends _i1.Mock implements _i9.ServiceFile {
  @override
  _i5.ExptService deleteFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [path],
        ),
        returnValue: _FakeExptService_3(
          this,
          Invocation.method(
            #deleteFile,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeExptService_3(
          this,
          Invocation.method(
            #deleteFile,
            [path],
          ),
        ),
      ) as _i5.ExptService);
  @override
  _i5.ExptService saveFile({
    required String? savePath,
    required List<int>? fileData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFile,
          [],
          {
            #savePath: savePath,
            #fileData: fileData,
          },
        ),
        returnValue: _FakeExptService_3(
          this,
          Invocation.method(
            #saveFile,
            [],
            {
              #savePath: savePath,
              #fileData: fileData,
            },
          ),
        ),
        returnValueForMissingStub: _FakeExptService_3(
          this,
          Invocation.method(
            #saveFile,
            [],
            {
              #savePath: savePath,
              #fileData: fileData,
            },
          ),
        ),
      ) as _i5.ExptService);
  @override
  _i5.ExptService deleteFolder(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFolder,
          [path],
        ),
        returnValue: _FakeExptService_3(
          this,
          Invocation.method(
            #deleteFolder,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeExptService_3(
          this,
          Invocation.method(
            #deleteFolder,
            [path],
          ),
        ),
      ) as _i5.ExptService);
  @override
  ({_i5.ExptService exptService, String path}) getAppPath() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppPath,
          [],
        ),
        returnValue: (
          exptService: _FakeExptService_3(
            this,
            Invocation.method(
              #getAppPath,
              [],
            ),
          ),
          path: ''
        ),
        returnValueForMissingStub: (
          exptService: _FakeExptService_3(
            this,
            Invocation.method(
              #getAppPath,
              [],
            ),
          ),
          path: ''
        ),
      ) as ({_i5.ExptService exptService, String path}));
  @override
  _i7.Future<_i5.ExptService> openUrl(String? link) => (super.noSuchMethod(
        Invocation.method(
          #openUrl,
          [link],
        ),
        returnValue: _i7.Future<_i5.ExptService>.value(_FakeExptService_3(
          this,
          Invocation.method(
            #openUrl,
            [link],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.ExptService>.value(_FakeExptService_3(
          this,
          Invocation.method(
            #openUrl,
            [link],
          ),
        )),
      ) as _i7.Future<_i5.ExptService>);
}
