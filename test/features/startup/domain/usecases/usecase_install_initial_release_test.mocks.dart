// Mocks generated by Mockito 5.4.2 from annotations
// in fegi/test/features/startup/domain/usecases/usecase_install_initial_release_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fegi/core/exceptions/expt_data.dart' as _i2;
import 'package:fegi/core/exceptions/expt_service.dart' as _i3;
import 'package:fegi/core/feature/domain/entities/sdk_release.dart' as _i7;
import 'package:fegi/core/feature/infra/services/service_compress.dart' as _i8;
import 'package:fegi/features/startup/domain/entities/settings.dart' as _i6;
import 'package:fegi/features/startup/domain/repositories/repository_local_startup.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExptData_0 extends _i1.SmartFake implements _i2.ExptData {
  _FakeExptData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExptService_1 extends _i1.SmartFake implements _i3.ExptService {
  _FakeExptService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryLocalStartup].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryLocalStartup extends _i1.Mock
    implements _i4.RepositoryLocalStartup {
  @override
  _i5.Future<({_i2.ExptData exception, int id})> createSettings(
          _i6.Settings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSettings,
          [settings],
        ),
        returnValue: _i5.Future<({_i2.ExptData exception, int id})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #createSettings,
              [settings],
            ),
          ),
          id: 0
        )),
        returnValueForMissingStub:
            _i5.Future<({_i2.ExptData exception, int id})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #createSettings,
              [settings],
            ),
          ),
          id: 0
        )),
      ) as _i5.Future<({_i2.ExptData exception, int id})>);
  @override
  _i5.Future<({int count, _i2.ExptData exception})> createListSdkReleases(
          List<_i7.SdkRelease>? releases) =>
      (super.noSuchMethod(
        Invocation.method(
          #createListSdkReleases,
          [releases],
        ),
        returnValue: _i5.Future<({int count, _i2.ExptData exception})>.value((
          count: 0,
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #createListSdkReleases,
              [releases],
            ),
          )
        )),
        returnValueForMissingStub:
            _i5.Future<({int count, _i2.ExptData exception})>.value((
          count: 0,
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #createListSdkReleases,
              [releases],
            ),
          )
        )),
      ) as _i5.Future<({int count, _i2.ExptData exception})>);
  @override
  _i5.Future<({_i2.ExptData exception, int id})> createGlobalSdkRelease(
          _i7.SdkRelease? release) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGlobalSdkRelease,
          [release],
        ),
        returnValue: _i5.Future<({_i2.ExptData exception, int id})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #createGlobalSdkRelease,
              [release],
            ),
          ),
          id: 0
        )),
        returnValueForMissingStub:
            _i5.Future<({_i2.ExptData exception, int id})>.value((
          exception: _FakeExptData_0(
            this,
            Invocation.method(
              #createGlobalSdkRelease,
              [release],
            ),
          ),
          id: 0
        )),
      ) as _i5.Future<({_i2.ExptData exception, int id})>);
}

/// A class which mocks [ServiceCompress].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceCompress extends _i1.Mock implements _i8.ServiceCompress {
  @override
  _i5.Future<_i3.ExptService> unzip({
    required String? sourcePath,
    required String? destinationPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #unzip,
          [],
          {
            #sourcePath: sourcePath,
            #destinationPath: destinationPath,
          },
        ),
        returnValue: _i5.Future<_i3.ExptService>.value(_FakeExptService_1(
          this,
          Invocation.method(
            #unzip,
            [],
            {
              #sourcePath: sourcePath,
              #destinationPath: destinationPath,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.ExptService>.value(_FakeExptService_1(
          this,
          Invocation.method(
            #unzip,
            [],
            {
              #sourcePath: sourcePath,
              #destinationPath: destinationPath,
            },
          ),
        )),
      ) as _i5.Future<_i3.ExptService>);
  @override
  _i5.Future<_i3.ExptService> zip({
    required String? sourcePath,
    required String? destinationPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zip,
          [],
          {
            #sourcePath: sourcePath,
            #destinationPath: destinationPath,
          },
        ),
        returnValue: _i5.Future<_i3.ExptService>.value(_FakeExptService_1(
          this,
          Invocation.method(
            #zip,
            [],
            {
              #sourcePath: sourcePath,
              #destinationPath: destinationPath,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.ExptService>.value(_FakeExptService_1(
          this,
          Invocation.method(
            #zip,
            [],
            {
              #sourcePath: sourcePath,
              #destinationPath: destinationPath,
            },
          ),
        )),
      ) as _i5.Future<_i3.ExptService>);
}
