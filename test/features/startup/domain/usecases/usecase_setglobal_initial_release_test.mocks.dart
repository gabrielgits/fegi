// Mocks generated by Mockito 5.4.2 from annotations
// in fegi/test/features/startup/domain/usecases/usecase_setglobal_initial_release_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:fegi/core/exceptions/expt_data.dart' as _i3;
import 'package:fegi/core/exceptions/expt_service.dart' as _i2;
import 'package:fegi/core/feature/domain/entities/sdk_release.dart' as _i9;
import 'package:fegi/core/feature/infra/services/service_file.dart' as _i5;
import 'package:fegi/core/feature/infra/services/service_os.dart' as _i4;
import 'package:fegi/features/startup/domain/entities/settings.dart' as _i8;
import 'package:fegi/features/startup/domain/repositories/repository_local_startup.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExptService_0 extends _i1.SmartFake implements _i2.ExptService {
  _FakeExptService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExptData_1 extends _i1.SmartFake implements _i3.ExptData {
  _FakeExptData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ServiceOs].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceOs extends _i1.Mock implements _i4.ServiceOs {
  @override
  _i2.ExptService createEnvPath({
    required String? path,
    required String? key,
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createEnvPath,
          [],
          {
            #path: path,
            #key: key,
            #value: value,
          },
        ),
        returnValue: _FakeExptService_0(
          this,
          Invocation.method(
            #createEnvPath,
            [],
            {
              #path: path,
              #key: key,
              #value: value,
            },
          ),
        ),
        returnValueForMissingStub: _FakeExptService_0(
          this,
          Invocation.method(
            #createEnvPath,
            [],
            {
              #path: path,
              #key: key,
              #value: value,
            },
          ),
        ),
      ) as _i2.ExptService);
  @override
  _i2.ExptService updateEnvPath({
    required String? path,
    required String? key,
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEnvPath,
          [],
          {
            #path: path,
            #key: key,
            #value: value,
          },
        ),
        returnValue: _FakeExptService_0(
          this,
          Invocation.method(
            #updateEnvPath,
            [],
            {
              #path: path,
              #key: key,
              #value: value,
            },
          ),
        ),
        returnValueForMissingStub: _FakeExptService_0(
          this,
          Invocation.method(
            #updateEnvPath,
            [],
            {
              #path: path,
              #key: key,
              #value: value,
            },
          ),
        ),
      ) as _i2.ExptService);
  @override
  _i2.ExptService removeEnvPath({
    required String? path,
    required String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeEnvPath,
          [],
          {
            #path: path,
            #key: key,
          },
        ),
        returnValue: _FakeExptService_0(
          this,
          Invocation.method(
            #removeEnvPath,
            [],
            {
              #path: path,
              #key: key,
            },
          ),
        ),
        returnValueForMissingStub: _FakeExptService_0(
          this,
          Invocation.method(
            #removeEnvPath,
            [],
            {
              #path: path,
              #key: key,
            },
          ),
        ),
      ) as _i2.ExptService);
  @override
  ({_i2.ExptService exptService, List<String> list}) readEnvPath({
    required String? path,
    required String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readEnvPath,
          [],
          {
            #path: path,
            #key: key,
          },
        ),
        returnValue: (
          exptService: _FakeExptService_0(
            this,
            Invocation.method(
              #readEnvPath,
              [],
              {
                #path: path,
                #key: key,
              },
            ),
          ),
          list: <String>[]
        ),
        returnValueForMissingStub: (
          exptService: _FakeExptService_0(
            this,
            Invocation.method(
              #readEnvPath,
              [],
              {
                #path: path,
                #key: key,
              },
            ),
          ),
          list: <String>[]
        ),
      ) as ({_i2.ExptService exptService, List<String> list}));
}

/// A class which mocks [ServiceFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceFile extends _i1.Mock implements _i5.ServiceFile {
  @override
  _i2.ExptService deleteFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [path],
        ),
        returnValue: _FakeExptService_0(
          this,
          Invocation.method(
            #deleteFile,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeExptService_0(
          this,
          Invocation.method(
            #deleteFile,
            [path],
          ),
        ),
      ) as _i2.ExptService);
  @override
  _i2.ExptService saveFile({
    required String? savePath,
    required List<int>? fileData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFile,
          [],
          {
            #savePath: savePath,
            #fileData: fileData,
          },
        ),
        returnValue: _FakeExptService_0(
          this,
          Invocation.method(
            #saveFile,
            [],
            {
              #savePath: savePath,
              #fileData: fileData,
            },
          ),
        ),
        returnValueForMissingStub: _FakeExptService_0(
          this,
          Invocation.method(
            #saveFile,
            [],
            {
              #savePath: savePath,
              #fileData: fileData,
            },
          ),
        ),
      ) as _i2.ExptService);
  @override
  _i2.ExptService deleteFolder(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFolder,
          [path],
        ),
        returnValue: _FakeExptService_0(
          this,
          Invocation.method(
            #deleteFolder,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeExptService_0(
          this,
          Invocation.method(
            #deleteFolder,
            [path],
          ),
        ),
      ) as _i2.ExptService);
  @override
  ({_i2.ExptService exptService, String path}) getAppPath() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppPath,
          [],
        ),
        returnValue: (
          exptService: _FakeExptService_0(
            this,
            Invocation.method(
              #getAppPath,
              [],
            ),
          ),
          path: ''
        ),
        returnValueForMissingStub: (
          exptService: _FakeExptService_0(
            this,
            Invocation.method(
              #getAppPath,
              [],
            ),
          ),
          path: ''
        ),
      ) as ({_i2.ExptService exptService, String path}));
  @override
  _i6.Future<_i2.ExptService> openUrl(String? link) => (super.noSuchMethod(
        Invocation.method(
          #openUrl,
          [link],
        ),
        returnValue: _i6.Future<_i2.ExptService>.value(_FakeExptService_0(
          this,
          Invocation.method(
            #openUrl,
            [link],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.ExptService>.value(_FakeExptService_0(
          this,
          Invocation.method(
            #openUrl,
            [link],
          ),
        )),
      ) as _i6.Future<_i2.ExptService>);
}

/// A class which mocks [RepositoryLocalStartup].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryLocalStartup extends _i1.Mock
    implements _i7.RepositoryLocalStartup {
  @override
  _i6.Future<({_i3.ExptData exception, int id})> createSettings(
          _i8.Settings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSettings,
          [settings],
        ),
        returnValue: _i6.Future<({_i3.ExptData exception, int id})>.value((
          exception: _FakeExptData_1(
            this,
            Invocation.method(
              #createSettings,
              [settings],
            ),
          ),
          id: 0
        )),
        returnValueForMissingStub:
            _i6.Future<({_i3.ExptData exception, int id})>.value((
          exception: _FakeExptData_1(
            this,
            Invocation.method(
              #createSettings,
              [settings],
            ),
          ),
          id: 0
        )),
      ) as _i6.Future<({_i3.ExptData exception, int id})>);
  @override
  _i6.Future<({int count, _i3.ExptData exception})> createListSdkReleases(
          List<_i9.SdkRelease>? releases) =>
      (super.noSuchMethod(
        Invocation.method(
          #createListSdkReleases,
          [releases],
        ),
        returnValue: _i6.Future<({int count, _i3.ExptData exception})>.value((
          count: 0,
          exception: _FakeExptData_1(
            this,
            Invocation.method(
              #createListSdkReleases,
              [releases],
            ),
          )
        )),
        returnValueForMissingStub:
            _i6.Future<({int count, _i3.ExptData exception})>.value((
          count: 0,
          exception: _FakeExptData_1(
            this,
            Invocation.method(
              #createListSdkReleases,
              [releases],
            ),
          )
        )),
      ) as _i6.Future<({int count, _i3.ExptData exception})>);
  @override
  _i6.Future<({_i3.ExptData exception, int id})> createGlobalSdkRelease(
          _i9.SdkRelease? release) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGlobalSdkRelease,
          [release],
        ),
        returnValue: _i6.Future<({_i3.ExptData exception, int id})>.value((
          exception: _FakeExptData_1(
            this,
            Invocation.method(
              #createGlobalSdkRelease,
              [release],
            ),
          ),
          id: 0
        )),
        returnValueForMissingStub:
            _i6.Future<({_i3.ExptData exception, int id})>.value((
          exception: _FakeExptData_1(
            this,
            Invocation.method(
              #createGlobalSdkRelease,
              [release],
            ),
          ),
          id: 0
        )),
      ) as _i6.Future<({_i3.ExptData exception, int id})>);
}
